# Job
job.factory.class=org.apache.samza.job.yarn.YarnJobFactory
job.name=response-accumulator-service

# YARN
yarn.package.path=file://${basedir}/target/${project.artifactId}-${pom.version}-dist.tar.gz

# Task
task.class=org.debezium.services.ResponseAccumulatorService
task.inputs=debezium.partial-responses

# Serializers
serializers.registry.document.class=org.debezium.core.serde.DocumentSerdeFactory
serializers.registry.string.class=org.debezium.core.serde.StringSerdeFactory

# Systems
systems.debezium.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.debezium.samza.key.serde=string
systems.debezium.samza.msg.serde=document
systems.debezium.consumer.zookeeper.connect=localhost:2181/
systems.debezium.consumer.auto.offset.reset=largest
systems.debezium.producer.metadata.broker.list=localhost:9092
systems.debezium.producer.producer.type=sync
# Normally, we'd set this much higher, but we want things to look snappy in the demo.
systems.debezium.producer.batch.num.messages=1

# Key-value storage
stores.responses-cache.factory=org.apache.samza.storage.kv.KeyValueStorageEngineFactory
stores.responses-cache.changelog=debezium.responses-cache-changelog
stores.responses-cache.key.serde=string
stores.responses-cache.msg.serde=document

# Normally, we'd set this much higher, but we want things to look snappy in the demo.
stores.responses-cache.write.batch.size=0
stores.responses-cache.object.cache.size=0
